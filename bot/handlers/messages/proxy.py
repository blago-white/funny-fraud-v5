from aiogram import F
from aiogram.dispatcher.router import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from bot.states.forms import ProxySettingForm
from db.proxy import ProxyRepository
from ..common import db_services_provider

router = Router(name=__name__)


@router.message(F.text == "üîê –ò–∑–º–µ–Ω–∏—Ç—å –ü—Ä–æ–∫—Å–∏")
async def make_reset_apikey(message: Message, state: FSMContext):
    await state.set_state(state=ProxySettingForm.wait_base_proxy)

    await message.bot.send_message(
        chat_id=message.chat.id,
        text="üîÑ–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–∫—Å–∏:\n"
             "<i>–ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –ø–æ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª</i>",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(ProxySettingForm.wait_base_proxy)
@db_services_provider(provide_leads=False,
                      provide_gologin=False,
                      provide_proxy=True)
async def set_apikey(
        message: Message, state: FSMContext,
        proxydb: ProxyRepository):
    await state.clear()

    print("START")

    if (not len(message.text) > 3) or (len(message.text.split(":")) != 3):
        print("OTM")
        return await message.reply("‚úÖ–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")

    try:
        proxy = proxydb.add(proxy=message.text.replace(
            " ", ""
        ).replace("\n", ""))
    except Exception as e:
        return await message.reply(
            text=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e!r}"
        )

    print("OK")

    await message.reply(
        text=f"‚úÖ–ü—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n <code>{proxy}</code>"
    )
